//
// Mixins
// --------------------------------------------------

body {
/*  position: fixed;
  position: absolute;
  top: 50px;
  right: 0;
  bottom: 0;
  left: 0; */
  text-rendering: optimizeLegibility;
  width: 100%;
  padding: 50px 0 0;
}

.fixed {
  position: fixed; 
  top: 0; 
  height: 70px; 
  z-index: 1;
  }

section,
div#home,
div#about,
div#portfolio,
div#resume,
div#contact {
  height: device-height!important;
 // min-height: 100%!important;
  margin-top: 50px;
  margin-bottom: 110px;
}


.page-header {
  display: block;
  position: relative;
  max-width: 1024px;
  border: 0;
  margin: 110px auto 30px;
  padding: 0 10px;
  h1 {
    font-weight: 800;
    font-size: 50px;margin-bottom: 15px;
    color: @blue-txt;
  }
  @media screen and (min-width: 1025px) {
    padding: 0;
  }
}
.nav-tabs > li,
.nav-tabs > li a,
.nav-stacked > li + li {
  margin-top: 0!important;
  margin-bottom: 0!important;
}
.nav.nav-tabs.nav-stacked {
  display: block;
  float: left;
  background: @linkbox-bg;
  top: 0;
  left: 0;
  margin: 0 30px 0 0;
  width: 80px;
  padding: 0;
  border: 0;
  //: 0;
  z-index: 100;
  @media screen and (max-width: 320px) {
    width: 320px;
    height: 60px;
    margin: 0 0 15px 0;

  }
}

.nav.nav-tabs.nav-stacked li.active a:after {
  font-family: 'FontAwesome';
  color: @linkbox-active-bg;
  position: absolute;
  left: 79px;
  top: 17.5px;
  width: 20px;
  height: 20px;
  font-size: 25px;
  content: '\f0da';
  z-index: 30;
  @media screen and (max-width: 320px) {
    left: 32px;
    top: 50px;
    content: '\f0d7';

  }
  }   


.nav.nav-tabs.nav-stacked li a {
  margin-bottom: 0!important;
  border-radius: 0!important;
  box-shadow: 0!important;
  display: inline-block;
  position: relative;
  width: 80px;
  min-width: 80px;
  height: 60px;
  min-height: 60px;
  margin: 0 15px 0 0;
  font-size: 14px;
  line-height: 1;
  font-weight: 400;
  z-index: 20;  
  border-radius: 0;
  border-top: 1px solid @linkbox-bg;
  border-right: 1px solid @linkbox-bg;
  border-bottom: 1px solid darken(@linkbox-bg, 10%);
  border-left: 1px solid @linkbox-bg;
  box-shadow: 0;
  background: @linkbox-bg; 
  color: @linkbox-color;  
  width: 80px;
  height: 60px;
  padding: 8px 10px;
  overflow: show;
  &:hover {
    background: @linkbox-hover-bg;
    color: @linkbox-hover-color;
    border: 1px solid @linkbox-border-hover-color;
    border-width: 1px;
    box-shadow: 0;
    outline: 0;
    }
  &:active,
  &:focus {
    background: @linkbox-focus-bg;
    color: @linkbox-focus-color;
    border: 1px solid @linkbox-focus-bg;
    box-shadow: 0;
    outline: 0;
    }
  @media screen and (max-width: 320px) {
    display: inline-block;
    margin: 0 0 15px 0;
    float: left;
    border-top: 1px solid @linkbox-bg;
    border-right: 1px solid @linkbox-bg;
    border-bottom: 1px solid @linkbox-bg;
    border-left: 1px solid darken(@linkbox-bg, 10%);
    } 
}
.nav.nav-tabs.nav-stacked li.active a {
  background: @linkbox-active-bg;
  border: 1px solid @linkbox-active-bg;  
  color: @linkbox-active-color;
  z-index: 25;
  @media screen and (max-width: 320px) {
    float: left;
    border-top: 1px solid @linkbox-active-bg;
    border-right: 1px solid @linkbox-active-bg;
    border-bottom: 2px solid @linkbox-active-bg;
    border-left: 1px solid darken(@linkbox-active-bg, 10%);
    }
  }

.panel {
  width: 100%;
  max-width: 1024px;
  padding: 0;
  margin: 0 auto;
  //background: @panel-bg;
  border: 0;
  box-shadow: 0;
  //color: @panel-color;
  z-index: 0;
  h2 {
    @media screen and (max-width: 480px) {
      font-size: 24px;
    }
  }
  h5 {
    font-weight: 500;
    margin-bottom: 20px;
  }     
  .panel-top {
    position: relative;
    display: block;
    top: 0;
    left: 0;
    width: 100%;
//    max-width: 1024px; 
    height: 240px;
    z-index: 0;
    margin-bottom: -240px;
    @media screen and (max-width: 320px) {
      height: 320px;
      }
    }
  .panel-content {
    //padding-left: 15px;
    //padding-right: 15px;
    color: @white;
    &.tab-content > .tab-pane {
      display: none;
      }
    &.tab-content.active > .tab-pane {
      display: block;
      }
    img {
      display: inline-block;
      float: left;
      padding: 0;
      margin-right: 30px;
      margin-bottom: 15px;
      margin-top: -7px;
      width: 100%;
      max-width: 80px;
      height: auto;
      z-index: 50;
      &.img-hero {
        border: 0;
        border-radius: @border-radius-base;
        margin-bottom: 60px;
        @media screen and (max-width: 320px) {
          display: none;
          }
        @media screen and (min-width: 321px) and (max-width: 480px) {
          margin-bottom: 0;
          margin-top: -3px;
        } 
        @media screen and (min-width: 600px) and (max-width: 767px) {
          margin-bottom: 40px;
          margin-top: 0;
          border-width: 2px;
          }
      }
      @media screen and (max-width: 640px) {
       //   max-width: 60px;
          margin-right: 15px;
      }

      @media screen and (min-width: 1024px) {
        margin-left: 60px;
      }
    }
    .panel-hero {
      color: @white;
      padding: 45px 30px 0 110px;
      z-index: 500;
      height: 240px;
      min-height: 240px;
      margin-bottom: 0;
      //z-index: 100;
      strong {
        font-weight: 700;
        }
      h2 {
        color: @blue-txt;
      }
      @media screen and (max-width: 320px) {
        padding: 15px;
      }
      @media screen and (min-width: 321px) and (max-width: 640px) {
        padding: 30px;
      }
    }
    .panel-main {
      background: darken(@brand-primary, 5%);
      color: @white;
      padding: 15px;
    }
  }
}


.ease {
  -webkit-transition: all .2s ease-in-out;
  -moz-transition: all .2s ease-in-out;
  -o-transition: all .2s ease-in-out;
  -ms-transition: all .2s ease-in-out;    
  transition: all .2s ease-in-out;
}

h1, .h1,
h2, .h2,
h3, .h3,
h4, .h4,
h5, .h5,
h6, .h6 {
  display: block;
  position: relative;
  font-family: @headings-font-family;
  font-weight: 800;
  color: inherit;
  margin: 0;
}
a,
.ui-widget & {
  &:hover,
  &:active,
  &:focus,
  .active,
  &.active * {
    outline: 0;
    text-decoration: none;
    box-shadow: 0;
  }
}
.btn a {
  color: @white;
}
lead,
.lead {
  font-weight: 400;
}
.round-top-corners {
  border-top-left-radius: @border-radius-large;  
  border-top-right-radius: @border-radius-large;  
  border-bottom-left-radius: 0;  
  border-bottom-right-radius: 0; 
}

.content-wrap {
  .make-row();
  margin-top: 10px;
  margin-bottom: 10px;
}

.content-narrow {
  .make-xs-column(12);
  .make-sm-column(4);
}

.content-wide {
  .make-xs-column(12);
  .make-sm-column(8);
  &.outer {
    margin: 0;
    padding: 0;
  }
}
.content-full {
  .make-sm-column(12);
}


a.navbar-brand {
  font-family: @headings-font-family;
  color: @gray-lighter;
  font-weight: 400;
}


#home & {
  text-align: center;
  color: @white;
  h1,
  h2 {
    font-weight: 200;
    text-transform: uppercase;
    margin: 0;
    line-height: 1;
    color: @white;
    @media screen and (max-width: 640px) {
       }
    span {
    font-weight: 800;
    }
  }
  h1 {
    font-size: 80px;
    margin-top: 15px;
    @media screen and (max-width: 480px) {
      font-size: 35px;
    }
    @media screen and (min-width: 481px) and (max-width: 640px) {
      font-size: 65px;
    }
    span.icon {
      position: absolute;
      margin-left: -1.5em;
      color: @orange;
    }
  }

  h2 {
   font-size: 52px;
    @media screen and (max-width: 480px) {
      font-size: 23px;
    }
    @media screen and (min-width: 481px) and (max-width: 640px) {
      font-size: 42px;
    }
  }
  h3 {
    font-weight: 300;
    color: @white;
    margin: 15px 15px 30px;
    //margin-top: 15px;
    //margin-bottom: 30px;
    line-height: 1.3;
    @media screen and (max-width: 4800px) {
      font-size: 20px;
    }
  }
}

.col-body {
  h3 {
    color: @red;
  }
}
*,
&,
a & {
  .fa,
  i,
  .icon {
    color: @gray;
    #home .jumbotron & {
      color: @orange;
    }
  }
}



/* accordion header */
#resume-content h3  {
    cursor:pointer;
    color: @link-blue;
    &:first-of-type {
      margin-top: 0;
    }
/*    max-width: 300px;
    &:after {
      display: inline-block;
      float: right;
      font-family: "FontAwesome";
      margin-top: 0;
      content: '\f107';
      margin-right: 10px;
    } */
}

/* currently active header */
#resume-content h3.current {
    cursor:default;
    color: darken(@link-blue, 10%);
/*    &:after {
      content: '';
    } */
}

/* accordion pane */
#resume-content .pane {
  display: none;
  overflow: hidden;
 }

/* a title inside pane */
#resume-content .pane h3 {
 }

/*
.tabs,
.nav.nav-tabs,
ul.nav.nav-tabs {
  display: block;
  height: 320px;
  width: 80px;
 // padding: 0 15px;
  border-radius: 0;
}*/


// Portfolio styles

.section-content {
  display: block;
  position: relative;
  margin: 0 auto;
  padding: 15px;
  width: 100%;
  min-height: 100%;
  background: @gray-darker;
  color: @white;
  z-index: 0;
  p {
    font-size: @font-size-base!important;
  }

}
/*
.tab-content {
  display: block;
  position: relative;
  background: transparent;
  color: inherit;
  margin: 0 auto;
  width: 100%;
  height: auto;
  z-index: 1;
}

.tab-pane img {
  display: inline-block;
  float: left;
  margin: -15px 20px 15px 0;
  width: 100%;
  max-width: 120px;
  height: auto;
  vertical-align: middle;
  @media screen and (max-width: 640px) {
      max-width: 80px;
      margin: 5px 15px 50px 0;
  }
}
*/
.main-block {
  //clear: both;
  float: none;
  display: block;
  position: relative;
  width: 100%;
  margin: 20px auto;
}

.top-block {
  display: inline-block;
  vertical-align: middle;
  float: right;
  width: 100%;
  height: 240px;
  min-height: 24px;
  padding: 30px 30px 30px 110px; 
  //margin: auto 0 20px;
  z-index: 5;
  @media screen and (max-width: 320px) {
    padding: 70px 0 0;
  }
 /* h1,
  h2,
  h3 {
    display: inline-block;
    text-align: left;
    white-space: normal;
    word-wrap: normal;
    } */
  h2 {
    margin: 0;
    color: @white;
    //font-weight: 700;
    //line-height: 1.4;
    @media screen and (max-width: 640px) {
      font-size: 25px;
    }
  }
  h4 {
    margin: 0;
    font-weight: 500;
    color: @white;
    @media screen and (max-width: 640px) {
      font-size: 16px;
    }
  }
}



p.bg-gray {
  padding:15px;
  width: 100%;
  margin: 20px auto;
  background: @gray-dark;
  color: @white;
  border-radius: @border-radius-large;
  @media screen and (min-width: 640px) {
    font-size: @font-size-h4;
    margin: 40px auto;
    padding: 30px;
  }
}


.modal-dialog {
  background: @gray-lighter;
}

.modal-header {
  padding: 15px 15px 0;
  color: @brand-primary;
  border: 0;
  font-size: @font-size-h4;
  i.fa {
    color: inherit;
    font-size: 35px;
  }

}

.modal-body img {
  width: 100%;
  height: auto;
}


// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
.clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// WebKit-style focus
.tab-focus() {
  // Default
  //outline: thin dotted;
  outline: 0;
  // WebKit
  //outline: 5px auto -webkit-focus-ring-color;
  outline: 0;
  //outline-offset: -2px;
}

// Center-align a block level element
.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Sizing shortcuts
.size(@width; @height) {
  width: @width;
  height: @height;
}
.square(@size) {
  .size(@size; @size);
}

// Placeholder text
.placeholder(@color: @input-color-placeholder) {
  &::-moz-placeholder           { color: @color;   // Firefox
                                  opacity: 1; } // See https://github.com/twbs/bootstrap/pull/11526
  &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}

// Text overflow
// Requires inline-block or block for proper styling
.text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// CSS image replacement
//
// Heads up! v3 launched with with only `.hide-text()`, but per our pattern for
// mixins being reused as classes with the same name, this doesn't hold up. As
// of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`. Note
// that we cannot chain the mixins together in Less, so they are repeated.
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

// Deprecated as of v3.0.1 (will be removed in v4)
.hide-text() {
  font: ~"0/0" a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}
// New mixin to use as of v3.0.1
.text-hide() {
  .hide-text();
}



// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
.border-top-radius(@radius) {
  border-top-right-radius: @radius;
   border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
  border-bottom-right-radius: @radius;
     border-top-right-radius: @radius;
}
.border-bottom-radius(@radius) {
  border-bottom-right-radius: @radius;
   border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
  border-bottom-left-radius: @radius;
     border-top-left-radius: @radius;
}

// Drop shadows
//
// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's
//   supported browsers that have box shadow capabilities now support the
//   standard `box-shadow` property.
.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
          box-shadow: @shadow;
}

// Transitions
.transition(@transition) {
  -webkit-transition: @transition;
          transition: @transition;
}
.transition-property(@transition-property) {
  -webkit-transition-property: @transition-property;
          transition-property: @transition-property;
}
.transition-delay(@transition-delay) {
  -webkit-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
  -webkit-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}
.transition-transform(@transition) {
  -webkit-transition: -webkit-transform @transition;
     -moz-transition: -moz-transform @transition;
       -o-transition: -o-transform @transition;
          transition: transform @transition;
}

// Transformations
.rotate(@degrees) {
  -webkit-transform: rotate(@degrees);
      -ms-transform: rotate(@degrees); // IE9 only
          transform: rotate(@degrees);
}
.scale(@ratio; @ratio-y...) {
  -webkit-transform: scale(@ratio, @ratio-y);
      -ms-transform: scale(@ratio, @ratio-y); // IE9 only
          transform: scale(@ratio, @ratio-y);
}
.translate(@x; @y) {
  -webkit-transform: translate(@x, @y);
      -ms-transform: translate(@x, @y); // IE9 only
          transform: translate(@x, @y);
}
.skew(@x; @y) {
  -webkit-transform: skew(@x, @y);
      -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
          transform: skew(@x, @y);
}
.translate3d(@x; @y; @z) {
  -webkit-transform: translate3d(@x, @y, @z);
          transform: translate3d(@x, @y, @z);
}

.rotateX(@degrees) {
  -webkit-transform: rotateX(@degrees);
      -ms-transform: rotateX(@degrees); // IE9 only
          transform: rotateX(@degrees);
}
.rotateY(@degrees) {
  -webkit-transform: rotateY(@degrees);
      -ms-transform: rotateY(@degrees); // IE9 only
          transform: rotateY(@degrees);
}
.perspective(@perspective) {
  -webkit-perspective: @perspective;
     -moz-perspective: @perspective;
          perspective: @perspective;
}
.perspective-origin(@perspective) {
  -webkit-perspective-origin: @perspective;
     -moz-perspective-origin: @perspective;
          perspective-origin: @perspective;
}
.transform-origin(@origin) {
  -webkit-transform-origin: @origin;
     -moz-transform-origin: @origin;
      -ms-transform-origin: @origin; // IE9 only
          transform-origin: @origin;
}

// Animations
.animation(@animation) {
  -webkit-animation: @animation;
          animation: @animation;
}
.animation-name(@name) {
  -webkit-animation-name: @name;
          animation-name: @name;
}
.animation-duration(@duration) {
  -webkit-animation-duration: @duration;
          animation-duration: @duration;
}
.animation-timing-function(@timing-function) {
  -webkit-animation-timing-function: @timing-function;
          animation-timing-function: @timing-function;
}
.animation-delay(@delay) {
  -webkit-animation-delay: @delay;
          animation-delay: @delay;
}
.animation-iteration-count(@iteration-count) {
  -webkit-animation-iteration-count: @iteration-count;
          animation-iteration-count: @iteration-count;
}
.animation-direction(@direction) {
  -webkit-animation-direction: @direction;
          animation-direction: @direction;
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
.backface-visibility(@visibility){
  -webkit-backface-visibility: @visibility;
     -moz-backface-visibility: @visibility;
          backface-visibility: @visibility;
}

// Box sizing
.box-sizing(@boxmodel) {
  -webkit-box-sizing: @boxmodel;
     -moz-box-sizing: @boxmodel;
          box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select; // IE10+
          user-select: @select;
}

// Resize anything
.resizable(@direction) {
  resize: @direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@column-count; @column-gap: @grid-gutter-width) {
  -webkit-column-count: @column-count;
     -moz-column-count: @column-count;
          column-count: @column-count;
  -webkit-column-gap: @column-gap;
     -moz-column-gap: @column-gap;
          column-gap: @column-gap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
  word-wrap: break-word;
  -webkit-hyphens: @mode;
     -moz-hyphens: @mode;
      -ms-hyphens: @mode; // IE10+
       -o-hyphens: @mode;
          hyphens: @mode;
}

// Opacity
.opacity(@opacity) {
  opacity: @opacity;
  // IE8 filter
  @opacity-ie: (@opacity * 100);
  filter: ~"alpha(opacity=@{opacity-ie})";
}



// GRADIENTS
// --------------------------------------------------

#gradient {

  // Horizontal gradient, from left to right
  //
  // Creates two color stops, start and end, by specifying a color and position for each color stop.
  // Color stops are not available in IE9 and below.
  .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
    background-image: -webkit-linear-gradient(left, color-stop(@start-color @start-percent), color-stop(@end-color @end-percent)); // Safari 5.1-6, Chrome 10+
    background-image:  linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
  }

  // Vertical gradient, from top to bottom
  //
  // Creates two color stops, start and end, by specifying a color and position for each color stop.
  // Color stops are not available in IE9 and below.
  .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
    background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+
    background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
  }

  .directional(@start-color: #555; @end-color: #333; @deg: 45deg) {
    background-repeat: repeat-x;
    background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+
    background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  }
  .horizontal-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
    background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
    background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  .vertical-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
    background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
    background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  .radial(@inner-color: #555; @outer-color: #333) {
    background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
    background-image: radial-gradient(circle, @inner-color, @outer-color);
    background-repeat: no-repeat;
  }
  .striped(@color: rgba(255,255,255,.15); @angle: 45deg) {
    background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
    background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
  }
}

// Reset filters for IE
//
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.
.reset-filter() {
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}



// Retina images
//
// Short retina mixin for setting background-image and -size

.img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
  background-image: url("@{file-1x}");

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (   min--moz-device-pixel-ratio: 2),
  only screen and (     -o-min-device-pixel-ratio: 2/1),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url("@{file-2x}");
    background-size: @width-1x @height-1x;
  }
}


// Responsive image
//
// Keep images from scaling beyond the width of their parents.

.img-responsive(@display: block) {
  display: @display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}


// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@color: #e5e5e5) {
  height: 1px;
  margin: ((@line-height-computed / 2) - 1) 0;
  overflow: hidden;
  background-color: @color;
}

// Panels
// -------------------------
.panel-variant(@border; @heading-text-color; @heading-bg-color; @heading-border) {
  border-color: @border;

  & > .panel-heading {
    color: @heading-text-color;
    background-color: @heading-bg-color;
    border-color: @heading-border;

    + .panel-collapse .panel-body {
      border-top-color: @border;
    }
  }
  & > .panel-footer {
    + .panel-collapse .panel-body {
      border-bottom-color: @border;
    }
  }
}

// Alerts
// -------------------------
.alert-variant(@background; @border; @text-color) {
  background-color: @background;
  border-color: @border;
  color: @text-color;

  hr {
    border-top-color: darken(@border, 5%);
  }
  .alert-link {
    color: darken(@text-color, 10%);
  }
}

// Tables
// -------------------------
.table-row-variant(@state; @background) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  .table > thead > tr,
  .table > tbody > tr,
  .table > tfoot > tr {
    > td.@{state},
    > th.@{state},
    &.@{state} > td,
    &.@{state} > th {
      background-color: @background;
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover > tbody > tr {
    > td.@{state}:hover,
    > th.@{state}:hover,
    &.@{state}:hover > td,
    &.@{state}:hover > th {
      background-color: darken(@background, 5%);
    }
  }
}

// List Groups
// -------------------------
.list-group-item-variant(@state; @background; @color) {
  .list-group-item-@{state} {
    color: @color;
    background-color: @background;

    a& {
      color: @color;

      .list-group-item-heading { color: inherit; }

      &:hover,
      &:focus {
        color: @color;
        background-color: darken(@background, 5%);
      }
      &.active,
      &.active:hover,
      &.active:focus {
        color: #fff;
        background-color: @color;
        border-color: @color;
      }
    }
  }
}

// Button variants
// -------------------------
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
.button-variant(@color; @background; @border) {
  color: @color;
  background-color: @background;
  border-color: @border;

  &:hover,
  &:focus,
  &:active,
  &.active,
  .open .dropdown-toggle& {
    color: @color;
    background-color: darken(@background, 8%);
        border-color: darken(@border, 12%);
  }
  &:active,
  &.active,
  .open .dropdown-toggle& {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: @background;
          border-color: @border;
    }
  }

  .badge {
    color: @background;
    background-color: @color;
  }
}

// Button sizes
// -------------------------
.button-size(@padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
  padding: @padding-vertical @padding-horizontal;
  font-size: @font-size;
  line-height: @line-height;
  border-radius: @border-radius;
}

// Pagination
// -------------------------
.pagination-size(@padding-vertical; @padding-horizontal; @font-size; @border-radius) {
  > li {
    > a,
    > span {
      padding: @padding-vertical @padding-horizontal;
      font-size: @font-size;
    }
    &:first-child {
      > a,
      > span {
        .border-left-radius(@border-radius);
      }
    }
    &:last-child {
      > a,
      > span {
        .border-right-radius(@border-radius);
      }
    }
  }
}

// Labels
// -------------------------
.label-variant(@color) {
  background-color: @color;
  &[href] {
    &:hover,
    &:focus {
      background-color: darken(@color, 10%);
    }
  }
}

// Contextual backgrounds
// -------------------------
.bg-variant(@color) {
  background-color: @color;
  a&:hover {
    background-color: darken(@color, 10%);
  }
}

// Typography
// -------------------------
.text-emphasis-variant(@color) {
  color: @color;
  a&:hover {
    color: darken(@color, 10%);
  }
}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbar-vertical-align(30px);` to calculate the appropriate top margin.
.navbar-vertical-align(@element-height) {
  margin-top: ((@navbar-height - @element-height) / 2);
  margin-bottom: ((@navbar-height - @element-height) / 2);
}

// Progress bars
// -------------------------
.progress-bar-variant(@color) {
  background-color: @color;
  .progress-striped & {
    #gradient > .striped();
  }
}

// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
  display: block !important;
  table&  { display: table; }
  tr&     { display: table-row !important; }
  th&,
  td&     { display: table-cell !important; }
}

.responsive-invisibility() {
  display: none !important;
}


// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
  &:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
  margin-left:  (@gutter / -2);
  margin-right: (@gutter / -2);
  &:extend(.clearfix all);
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage((@columns / @grid-columns));
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);
}
.make-xs-column-offset(@columns) {
  @media (min-width: @screen-xs-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-push(@columns) {
  @media (min-width: @screen-xs-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-xs-column-pull(@columns) {
  @media (min-width: @screen-xs-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-sm-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-md-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-lg-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @grid-columns));
  }
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .col(1); // kickstart it
}

.float-grid-columns(@class) {
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
  .float-grid-columns(@class);
  .loop-grid-columns(@grid-columns, @class, width);
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  .loop-grid-columns(@grid-columns, @class, offset);
}

// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

.form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5) {
  // Color the label and help text
  .help-block,
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline  {
    color: @text-color;
  }
  // Set the border and box shadow on specific inputs to match
  .form-control {
    border-color: @border-color;
    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken(@border-color, 10%);
      @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@border-color, 20%);
      .box-shadow(@shadow);
    }
  }
  // Set validation states also for addons
  .input-group-addon {
    color: @text-color;
    border-color: @border-color;
    background-color: @background-color;
  }
  // Optional feedback icon
  .form-control-feedback {
    color: @text-color;
  }
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `@input-focus-border` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.

.form-control-focus(@color: @input-border-focus) {
  @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);
  &:focus {
    border-color: @color;
    outline: 0;
    .box-shadow(~"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}");
  }
}

// Form control sizing
//
// Relative text size, padding, and border-radii changes for form controls. For
// horizontal sizing, wrap controls in the predefined grid classes. `<select>`
// element gets special love because it's special, and that's a fact!

.input-size(@input-height; @padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
  height: @input-height;
  padding: @padding-vertical @padding-horizontal;
  font-size: @font-size;
  line-height: @line-height;
  border-radius: @border-radius;

  select& {
    height: @input-height;
    line-height: @input-height;
  }

  textarea&,
  select[multiple]& {
    height: auto;
  }
}
